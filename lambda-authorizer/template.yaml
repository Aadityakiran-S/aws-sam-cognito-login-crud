AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda-authorizer
  SAM Template for lambda-authorizer

Globals:
  Function:
    Timeout: 500
    MemorySize: 128
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENTRY_DB: !Ref Table
        REGION_NAME: !Ref Region
Parameters:
  Table:
    Type: String
    Default: EntryDBTable
  Region:
    Type: String
    Default: ap-south-1

Resources:
  ListAllEntriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handler/
      Handler: app.listAllEntries
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EntryDBTable
      Events:
        CreateEntry:
          Type: Api
          Properties:
            Path: /entry
            Method: get

  CreateEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handler/
      Handler: app.createEntry
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EntryDBTable
      Events:
        CreateEntry:
          Type: Api
          Properties:
            Path: /entry
            Method: post

  GetEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handler/
      Handler: app.getEntry
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EntryDBTable
      Events:
        CreateEntry:
          Type: Api
          Properties:
            Path: /entry/{id}
            Method: get

  UpdateEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handler/
      Handler: app.updateEntry
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EntryDBTable
      Events:
        CreateEntry:
          Type: Api
          Properties:
            Path: /entry/{id}
            Method: put

  DeleteEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handler/
      Handler: app.deleteEntry
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EntryDBTable
      Events:
        CreateEntry:
          Type: Api
          Properties:
            Path: /entry/{id}
            Method: delete

  LambdaAuthUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: LambdaAuthUserPool
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  LambdaAuthUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref LambdaAuthUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  LambdaAuthCognitoAuthApi:
    DependsOn: LambdaAuthUserPool
    Type: AWS::Serverless::Api
    Properties:
      Name: LambdaAuthCognitoAuthApi
      StageName: Prod
      Cors: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt "LambdaAuthUserPool.Arn"

  LambdaAuthCognitoLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handler/
      Handler: app.cognitoLogin
      Runtime: nodejs14.x
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId: !Ref LambdaAuthCognitoAuthApi
            Path: /login
            Method: POST

  EntryDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref Table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  LambdaAuthorizerApi:
    Description: "API Gateway endpoint URL for Prod stage for LambdaAuthorizer function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/lambda-authorizer/"
